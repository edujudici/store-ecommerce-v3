default:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  - build
  # - test
  # - analysis
  - release
  - deploy
  # - notification

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"

  # Slack config
  IDENTIFICACAO_PROJETO: "*$CI_PROJECT_NAME $CI_COMMIT_REF_NAME*"
  SLACK_USERNAME: "DevOps - $CI_PROJECT_NAME $CI_COMMIT_REF_NAME"
  SLACK_CHANNEL: "#monitoramento"

1_build_project:
  stage: build
  script:
    - echo "Running build project..."
    - docker --version
    - docker compose version

    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:latest || true

    # builds the project, passing proxy variables, using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - docker build
      --pull
      --build-arg USER=deployer
      --build-arg UID=1000
      --build-arg GID=1000
      --cache-from $CI_REGISTRY_IMAGE:latest
      --file ./dockerfiles/php/Dockerfile
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# 2_unit_tests:
#   stage: test
#   dependencies:
#     - 1_build_project
#   script:
#     - echo "Running test project..."
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker run $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA /script/to/run/tests

# 3_static_analysis:
#   stage: analysis
#   dependencies:
#     - 1_build_project
#   script:
#     - echo "Running Static Analysis..."
##     - ./vendor/bin/psalm --show-info=true
#     - php artisan insights --no-interaction --min-quality=80 --min-architecture=80 --min-style=80

4_release-image:
  stage: release
  dependencies:
    - 1_build_project
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    # Annnd we push it.
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

5_deploy_project:
  stage: deploy
  only:
    - main
  script:
    - echo "Running deploying project..."

    # create the new docker-compose.yml
    - envsubst < docker-compose-production.tmpl > docker-compose-prod.yml

    # verificar se o ssh-agent ta instalado
    - 'which ssh-agent || ( apk add --update --no-cache openssh-client )'
    - eval $(ssh-agent -s)

    # adicionar nossa SSH KEY que está armazenada em SSH_PRIVATE_KEY (agent)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # add server to list of known hosts
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
    - echo $SSH_HOST_KEY >> ~/.ssh/known_hosts

    # upload docker-compose to the server
    - scp docker-compose-prod.yml $DEPLOY_USER@$DEPLOY_SERVER:/var/www/

    # docker login and restart services
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "cd /var/www;
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        docker compose up -d"


# 6_success_notification:
#   stage: notification
#   when: on_success
#   only:
#     - main
#   variables:
#     SLACK_ICON: ':heavy_check_mark:'
#     NOTIFICATION_MESSAGE: "$SLACK_ICON Fim da atualização do $IDENTIFICACAO_PROJETO"
#     NOTIFY_NOW: 'curl -X POST --data-urlencode "payload={\"channel\": \"$SLACK_CHANNEL\", \"username\": \"$SLACK_USERNAME\", \"text\": \"$NOTIFICATION_MESSAGE\"}" $SLACK_WEBHOOK_URL'
#   script:
#     - eval "$NOTIFY_NOW"

# 6_failure_notification:
#   stage: notification
#   when: on_failure
#   only:
#     - main
#   variables:
#     SLACK_ICON: ':heavy_check_mark:'
#     NOTIFICATION_MESSAGE: "$SLACK_ICON Falha no $IDENTIFICACAO_PROJETO"
#     NOTIFY_NOW: 'curl -X POST --data-urlencode "payload={\"channel\": \"$SLACK_CHANNEL\", \"username\": \"$SLACK_USERNAME\", \"text\": \"$NOTIFICATION_MESSAGE\"}" $SLACK_WEBHOOK_URL'
#   script:
#     - eval "$NOTIFY_NOW"
